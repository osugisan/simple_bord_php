# php artisan make:model で使用するModelファイルを作成します
# 同時にマイグレーションファイルも作成します
php artisan make:model -m Post

# SQLite3でDBを作成
sqlite3 database/database.sqlite
.tables
.exit

# マイグレーションファイルの内容をDBに反映します
php artisan migrate

# 作成したModelを利用したRESTfulなControllerを生成します
php artisan make:controller PostController --resource --model=Post

# すべてのファイルをステージングする
git add .

# 「generate model & controller post」というコミットメッセージでコミットする
git commit -m "generate model & controller post"

ルーティング
Route::resource(<ルーティングのURL>, <使用するコントローラー>);

・form
RESTfulなURLでは、/postsのような/[モデル名]のURLにPOSTリクエストでパラメータを送信することで新しいデータを作成します。

またLaravelでは「CSRF」という攻撃方法に対処するための対策がされています。
{{ csrf_field() }}ではCSRFトークンを生成し、フォームで入力されたパラメータを送信できるようにしています。


・compact('post')
ビューに変数を渡すことができる


・バリデーション設置

コントローラーの各アクションに

$request->validate([
    'title' => 'required|max:255',
    'content' => 'required',
]);


バリメッセージ表示

各ビューに

@if ($errors->any())
    <div class="alert alert-danger">
        <ul>
            @foreach ($errors->all() as $error)
                <li>{{ $error }}</li>
            @endforeach
        </ul>
    </div>
@endif

送信した内容を保持する

oldヘルパー

{{ old('content') === '' ? $post->content : old('content') }}


